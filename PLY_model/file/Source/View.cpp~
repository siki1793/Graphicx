#include "View.h"
#include "Controller.h"
#include "Model.h"
#include<iostream>
#include<math.h>

void View::renderFunction(){
    //Objects of corresponding classes
    Controller a1c;
    View a1v;
    Model a1m;

    //Default Settings and clearing buffers
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glEnable( GL_BLEND );
    glPushMatrix();
        a1m.quaternion('x',a1c.getmAngle());
        a1v.light();
    glPopMatrix();

    //Call for drawing the axes
    glLoadIdentity();
    a1v.drawAxes();
    /*Listner on if left mouse button clicked.
      If clicked it will display that point
    */
    int clicks = a1c.getClickCount();
    if(clicks){
        for(int i = 0; i < clicks; i++){
            //Call to draw the points in view using the co-ordinates stored in x and y arrays called from controller.
            a1v.drawPoint(a1c.getCoordinatesX(i),a1c.getCoordinatesY(i));
        }
    }

    //If there are 2 points clicked then we have to draw the line and measure the distance
    if(clicks >= 2){
        distance = a1m.calculateDistance(a1c.getCoordinatesX(0),a1c.getCoordinatesY(0),a1c.getCoordinatesX(1),a1c.getCoordinatesY(1));
        if(a1c.getFlag()){
            a1c.setFlag(0);
		}
        a1v.drawLine(a1c.getCoordinatesX(0),a1c.getCoordinatesY(0),0.0,a1c.getCoordinatesX(1),a1c.getCoordinatesY(1),0.0);
	}

    glPushMatrix();
	//Quaternion rotation about x,y,z axes respectively.
	a1m.quaternion('x',a1c.getxAngle());
    a1m.quaternion('y',a1c.getyAngle());
    a1m.quaternion('z',a1c.getzAngle());

    //This is to translate the object.
    glTranslatef(distanceX,distanceY,0.0);

    //Also, the object is scaled by "+/-" keys.
    glScalef(a1c.getScale(),a1c.getScale(),a1c.getScale());

    if(a1c.getLight() == 1)
        a1v.light();
    //Draws shapes.
    switch(a1c.getShape()){
        case 1 :
                a1v.drawCube();
                break;
        case 2 :
                a1v.drawCylinder();
                break;
        case 3 :
                a1v.drawSphere();
                break;
        case 4 :
                a1v.drawBunny(a1c.getShade());
                break;
        default : break;
    }
    glPopMatrix();

    glFlush();
    glutSwapBuffers();
    glutPostRedisplay();
}
//Light position
void View::light(){
    GLfloat light0_position[] = {1.0f, 1.0f, 0.0f, 0.0f};
    GLfloat light1_position[] = {-1.0f, -1.0f, 0.0f, 0.0f};
    GLfloat light0_ambient[] =  {1.0f, 1.0f, 1.0f, 0.0f};
    GLfloat light0_diffuse[] =  {1.0f, 1.0f, 1.0f, 0.0f};
    GLfloat cyan[]={1.0,1.0,1.0,0.0};
    GLfloat specular[]={1.0,1.0,1.0,0.0};
    GLfloat shininess[]={80.0};

    glEnable( GL_LIGHTING );
        glLightfv(GL_LIGHT0,GL_POSITION,light0_position);
        glLightfv(GL_LIGHT0,GL_AMBIENT,light0_ambient);
        glLightfv(GL_LIGHT0,GL_DIFFUSE,light0_diffuse);

        glLightfv(GL_LIGHT1,GL_POSITION,light1_position);
        glLightfv(GL_LIGHT1,GL_AMBIENT,light0_ambient);
        glLightfv(GL_LIGHT1,GL_DIFFUSE,light0_diffuse);

        glLightModelfv(GL_LIGHT_MODEL_AMBIENT,light0_ambient);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);
}

//Draws Bunny
void View::drawBunny(int shade){
    //glScalef(3.0 , 3.0 , 3.0);
    if(shade == 1){
        for(int i = 0; i < pl.getNoOfFaces(); i++){
            glBegin(GL_POLYGON);
                glNormal3f(pl.getNormals(i,0),pl.getNormals(i,1),pl.getNormals(i,2));
                for(int j = 0; j < 3; j++){
                    glVertex3f(3*pl.getVertices(pl.getFaces(i,j),0),3*pl.getVertices(pl.getFaces(i,j),1),3*pl.getVertices(pl.getFaces(i,j),2));
                }
            glEnd();
        }
    }
    else if(shade == 2){
        for(int i = 0; i < pl.getNoOfFaces(); i++){
            glBegin(GL_POLYGON);
                for(int j = 0; j < 3; j++){
                    glNormal3f((pl.getV(pl.getFaces(i,j),0)/pl.getV(pl.getFaces(i,j),3)),(pl.getV(pl.getFaces(i,j),1)/pl.getV(pl.getFaces(i,j),3)),(pl.getV(pl.getFaces(i,j),2)/pl.getV(pl.getFaces(i,j),3)));
                    glVertex3f(3*pl.getVertices(pl.getFaces(i,j),0),3*pl.getVertices(pl.getFaces(i,j),1),3*pl.getVertices(pl.getFaces(i,j),2));
                }
            glEnd();
        }
    }
}

//Draws X,Y,Z Axes
void View::drawAxes(){
    View a1v;
    a1v.drawLine(-1.0, 0.0, 0.0,1.0, 0.0, 0.0);
    a1v.drawLine(0.0, -1.0, 0.0, 0.0, 1.0, 0.0);
    a1v.drawLine(0.0, 0.0, -1.0, 0.0, 0.0, 1.0);
}

//Draws line
void View::drawLine(float x1,float y1,float z1,float x2,float y2,float z2){
    glBegin(GL_LINES);
        glVertex3f(x1 , y1 , z1);
        glVertex3f(x2 , y2 , z2);
    glEnd();
}

//Draws point
void View::drawPoint(float x,float y){
    glPointSize(2.0);
    glBegin(GL_POINTS);
        glVertex2f(x,y);
    glEnd();
}

//Draws Cube
void View::drawCube(){
    glBegin(GL_QUADS);
        glVertex3f(-0.3f,-0.3f ,-0.3f); //A
        glVertex3f(-0.2f,-0.2f ,0.3f); //E
        glVertex3f(-0.2f, 0.4f, 0.3f); //H
        glVertex3f(-0.3f, 0.3f, -0.3f); //D

        glVertex3f(-0.3f,-0.3f ,-0.3f); //A
        glVertex3f(0.3f,-0.3f ,-0.3f); //B
        glVertex3f(0.4f,-0.2f ,0.3f); //F
        glVertex3f(-0.2f,-0.2f ,0.3f); //E

        glVertex3f(-0.2f,-0.2f ,0.3f); //E
        glVertex3f(0.4f,-0.2f ,0.3f); //F
        glVertex3f(0.4f,0.4f ,0.3f); //G
        glVertex3f(-0.2f, 0.4f, 0.3f); //H

        glVertex3f(-0.2f, 0.4f, 0.3f); //H
        glVertex3f(-0.3f, 0.3f, -0.3f); //D
        glVertex3f(0.3f,0.3f ,-0.3f); //C
        glVertex3f(0.4f,0.4f ,0.3f); //G

        glVertex3f(0.3f,-0.3f ,-0.3f); //B
        glVertex3f(0.3f,0.3f ,-0.3f); //C
        glVertex3f(0.4f,0.4f ,0.3f); //G
        glVertex3f(0.4f,-0.2f ,0.3f); //F

        glVertex3f(-0.3f,-0.3f ,-0.3f); //A
        glVertex3f(0.3f,-0.3f ,-0.3f); //B
        glVertex3f(0.3f,0.3f ,-0.3f); //C
        glVertex3f(-0.3f, 0.3f, -0.3f); //D
    glEnd();
}

//Draws Cylinder
void View::drawCylinder(){
    glBegin(GL_POLYGON);
        for(double i = 0; i < 2 * PI; i += PI / 1000){ //Draw 2 circles
 			glVertex3f(cos(i) * radius , sin(i) * radius, 0.4);
			glVertex3f(cos(i) * radius,  sin(i) * radius, -0.4);
		}
		glEnd();
    	for(double i = 0; i < 2 * PI; i += PI / 1000){ //Join all points in these 2 circles
			glBegin(GL_LINES);
				glVertex3f(cos(i) * radius , sin(i) * radius, 0.4);
				glVertex3f(cos(i) * radius,  sin(i) * radius, -0.4);
			glEnd();
        }
}

//Draws Sphere
void View::drawSphere(){
    int i, j;
	float r = 0.5;
	int lats = 100;
	int longs = 100;
    for(i = 0; i <= lats; i++) {
        double lat0 = M_PI * (-0.5 + (double) (i - 1) / lats);
        double z0  = r*sin(lat0);
        double zr0 =  r*cos(lat0);

        double lat1 = M_PI * (-0.5 + (double) i / lats);
        double z1 = r*sin(lat1);
        double zr1 = r*cos(lat1);

        glBegin(GL_QUAD_STRIP);
            for(j = 0; j <= longs; j++) {
                double lng = 2 * M_PI * (double) (j - 1) / longs;
                double x = cos(lng);
                double y = sin(lng);

                glNormal3f(x * zr0, y * zr0, z0);
                glVertex3f(x * zr0, y * zr0, z0);
                glNormal3f(x * zr1, y * zr1, z1);
                glVertex3f(x * zr1, y * zr1, z1);
           }
        glEnd();
    }
}

//Getter and Setter functions required to call from other classes
float View::getDistance(){
    return distance;
}
float View::getDistanceX(){
    return distanceX;
}
float View::getDistanceY(){
    return distanceY;
}
void View::setDistance(float value){
    distance = value;
}
void View::setDistanceX(float value){
    distanceX = value;
}
void View::setDistanceY(float value){
    distanceY = value;
}
