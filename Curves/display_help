void display(void) {
   glClear(GL_COLOR_BUFFER_BIT);

   glPushMatrix();
   glLoadIdentity();
   drawXaxis();
   drawYaxis();
   glPopMatrix();

   //glPushMatrix();
   // glLoadIdentity();
   redrawPoints();

   if (bRotate) {
      glRotatef(-rotAngle, 0.0, 0.0, 0.1);
      bRotate = false;
   }

   if (bZoom) {
      glScalef (zoom[0], zoom[1], zoom[2]);
      bZoom = false;
   }

   if (bTranslate) {
      glTranslatef (translate[0], translate[1], translate[2]);
      translate[0] = 0.0;
      translate[1] = 0.0;
      translate[2] = 0.0;

      bTranslate = false;
   }

   if (isLagrange) {
      drawLagrange();
   }

   if (isBezier) {
      drawBezier();
   }

   //glPopMatrix();
   glFlush();
   glutPostRedisplay();
}

void keyboard(unsigned char key, int x, int y) {
   switch (key) {

      case 'R':
         bRotate = true;
         rotAngle = 20.;
         //glutPostRedisplay(); 
         break;

      case 'l':
         bRotate = true;
         rotAngle = -20.;
         //glutPostRedisplay(); 
         break;

      case '+':
         bZoom = true;
         printf("Zooming in\n");
         zoom[0] = 1.5;
         zoom[1] = 1.5;
         zoom[2] = 1.5;
         break;

      case '-':
         bZoom = true;
         printf("Zooming out\n");
         zoom[0] = 0.5;
         zoom[1] = 0.5;
         zoom[2] = 0.5;
         break;

      case 'a':
         bTranslate = true;
         translate[0] = -2.0;
         break;

      case 'w':
         bTranslate = true;
         translate[1] = 2.0;
         break;

      case 'd':
         bTranslate = true;
         translate[0] = 2.0;
         break;

      case 's':
         bTranslate = true;
         translate[1] = -2.0;
         break;

      case 'L':
         isLagrange = true;
         //drawLagrange();
         //glutPostRedisplay(); 
         break;

      case 'b':
         isBezier = true;
         //glutPostRedisplay(); 
         break;

      case 'v':
         bTakepoint = true; 
         break;

      case 'c':
         bTakepoint = false; 
         break;

      case 27:  /*  Escape Key  */
         exit(0);
         break;
      
      default:
         break;
   }
}

void reshape(int w, int h) {
   glViewport(0, 0, w, h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();

   if (w <= h) 
      gluOrtho2D (-250.0, 250.0, 
         -250.0*(GLfloat)h/(GLfloat)w, 250.0*(GLfloat)h/(GLfloat)w);
   else 
      gluOrtho2D (-250.0*(GLfloat)w/(GLfloat)h, 
         250.0*(GLfloat)w/(GLfloat)h, -250.0, 250.0);
   
   printf("Window resized : %d  %d\n", w, h);

   glMatrixMode(GL_MODELVIEW);
   glLoadIdentity();
   w_width = w;
   w_height = h;
   bReshape = true;
}
